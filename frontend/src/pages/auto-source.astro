---
import Layout from "../layouts/Layout.astro"
---

<Layout title="Auto Source - html2rss-web">
  <main>
    <h1>Auto Source</h1>
    <p>Generate RSS feeds from any website automatically</p>

    <div class="auto-source-form">
      <form id="auto-source-form" novalidate>
        <div class="form-group">
          <label for="url">Website URL:</label>
          <input
            type="url"
            id="url"
            name="url"
            placeholder="https://example.com"
            required
            aria-describedby="url-help"
            autocomplete="url"
          />
          <p id="url-help" class="help-text">Enter the full URL of the website you want to convert to RSS</p>
        </div>

        <div class="form-group">
          <label for="strategy">Strategy:</label>
          <select id="strategy" name="strategy" aria-describedby="strategy-help">
            <option value="ssrf_filter">SSRF Filter (Recommended)</option>
            <option value="faraday">Faraday</option>
          </select>
          <p id="strategy-help" class="help-text">Choose the method for fetching the website content</p>
        </div>

        <button type="submit" class="btn btn-primary" aria-describedby="submit-help">Generate Feed</button>
        <p id="submit-help" class="help-text">This will create a new RSS feed from the provided URL</p>
      </form>

      <div
        id="result"
        class="result-area"
        style="display: none;"
        role="region"
        aria-labelledby="result-heading"
      >
        <h3 id="result-heading">Generated Feed</h3>
        <div class="feed-info">
          <p><strong>Feed URL:</strong> <span id="feed-url" aria-label="Generated RSS feed URL"></span></p>
          <a
            id="subscribe-link"
            href="#"
            class="btn btn-secondary"
            aria-label="Subscribe to the generated RSS feed">Subscribe</a
          >
        </div>
      </div>

      <div id="error" class="error-area" style="display: none;" role="alert" aria-labelledby="error-heading">
        <h3 id="error-heading">Error</h3>
        <p id="error-message"></p>
      </div>
    </div>

    <div class="info">
      <h3>How it works</h3>
      <ul>
        <li>Enter any website URL</li>
        <li>html2rss automatically detects content structure</li>
        <li>Get a working RSS feed instantly</li>
        <li>Use the generated URL in your RSS reader</li>
      </ul>

      <div class="restrictions">
        <h4>⚠️ URL Restrictions</h4>
        <p>
          For security reasons, this public instance only allows certain URLs. If you need to scrape other
          sites, please:
        </p>
        <ul>
          <li>Deploy your own instance with full access</li>
          <li>Use the pre-built feeds from our gallery</li>
          <li>Contact the administrator for specific URL access</li>
        </ul>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.getElementById("auto-source-form").addEventListener("submit", async (e) => {
    e.preventDefault()

    const formData = new FormData(e.target)
    const url = formData.get("url")
    const strategy = formData.get("strategy")

    if (!url) return

    try {
      // Show loading state
      const submitBtn = e.target.querySelector('button[type="submit"]')
      const originalText = submitBtn.textContent
      submitBtn.textContent = "Generating..."
      submitBtn.disabled = true

      // Encode URL for API
      const encodedUrl = btoa(url)
      const apiUrl = `http://localhost:3000/auto_source/${encodedUrl}?strategy=${strategy}`

      // Test the API call
      const response = await fetch(apiUrl)

      if (!response.ok) {
        throw new Error(`API call failed: ${response.status} ${response.statusText}`)
      }

      // Show result area
      const resultArea = document.getElementById("result")
      const feedUrlSpan = document.getElementById("feed-url")
      const subscribeLink = document.getElementById("subscribe-link")

      feedUrlSpan.textContent = apiUrl
      subscribeLink.href = apiUrl
      resultArea.style.display = "block"

      // Scroll to result
      resultArea.scrollIntoView({ behavior: "smooth" })
    } catch (error) {
      console.error("Error generating feed:", error)
      showError(`Error generating feed: ${error.message}`)
    } finally {
      // Reset button state
      const submitBtn = e.target.querySelector('button[type="submit"]')
      submitBtn.textContent = originalText
      submitBtn.disabled = false
    }
  })

  function showError(message) {
    const errorArea = document.getElementById("error")
    const errorMessage = document.getElementById("error-message")
    const resultArea = document.getElementById("result")

    // Hide result area
    resultArea.style.display = "none"

    // Show error area
    errorMessage.textContent = message
    errorArea.style.display = "block"

    // Scroll to error
    errorArea.scrollIntoView({ behavior: "smooth" })
  }
</script>

<style>
  .auto-source-form {
    max-width: 600px;
    margin: 2rem 0;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }

  .form-group input,
  .form-group select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }

  .form-group input:focus,
  .form-group select:focus {
    outline: 2px solid #007bff;
    outline-offset: 2px;
  }

  .help-text {
    font-size: 0.875rem;
    color: #666;
    margin: 0.25rem 0 0 0;
  }

  .error-area {
    margin-top: 2rem;
    padding: 1rem;
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    color: #721c24;
  }

  .result-area {
    margin-top: 2rem;
    padding: 1rem;
    background: #f5f5f5;
    border-radius: 4px;
  }

  .feed-info {
    margin-top: 1rem;
  }

  .feed-info p {
    margin: 0.5rem 0;
  }

  .info {
    margin-top: 3rem;
    padding: 1rem;
    background: #e8f4f8;
    border-radius: 4px;
  }

  .info ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .info li {
    margin: 0.5rem 0;
  }

  .restrictions {
    margin-top: 2rem;
    padding: 1rem;
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 4px;
  }

  .restrictions h4 {
    margin: 0 0 0.5rem 0;
    color: #856404;
  }

  .restrictions p {
    margin: 0.5rem 0;
    color: #856404;
  }

  .restrictions ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
  }

  .restrictions li {
    margin: 0.25rem 0;
    color: #856404;
  }

  .btn {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    font-size: 1rem;
  }

  .btn:hover {
    background: #0056b3;
  }

  .btn:disabled {
    background: #6c757d;
    cursor: not-allowed;
  }

  .btn-secondary {
    background: #6c757d;
  }

  .btn-secondary:hover {
    background: #545b62;
  }
</style>
